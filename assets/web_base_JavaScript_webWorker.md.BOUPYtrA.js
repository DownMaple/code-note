import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.CzSkej0V.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"web/base/JavaScript/webWorker.md","filePath":"web/base/JavaScript/webWorker.md","lastUpdated":1736348821000}'),n={name:"web/base/JavaScript/webWorker.md"},l=e(`<p>祖传开篇：本文简单介绍 什么是<code>Web Worker</code> 以及基础用法；详细案例请前往：<a href="./../../vue/components/chunkUpload">封装elementPlus上传组件为大文件切片上传</a> 。作者水平有限，可能比较简陋，也或许有些错误，欢迎指正。</p><h2 id="web-worker" tabindex="-1">Web Worker <a class="header-anchor" href="#web-worker" aria-label="Permalink to &quot;Web Worker&quot;">​</a></h2><p>Web Worker 是 HTML5 引入的一个规范，允许 JavaScript 在后台线程中执行任务，而不会阻塞主页面的执行。这对于执行耗时操作（如密集计算、文件上传下载等）非常有用，能够显著提升 web 应用的性能和用户体验。</p><p>在 JavaScript 世界中，多线程编程曾经是一个遥不可及的梦想。然而，随着 Web Worker 的出现，这一梦想成为了现实。</p><h2 id="创建一个-web-worker-dedicated-worker" tabindex="-1">创建一个 Web Worker (Dedicated Worker ) <a class="header-anchor" href="#创建一个-web-worker-dedicated-worker" aria-label="Permalink to &quot;创建一个 Web Worker (Dedicated Worker )&quot;">​</a></h2><p>要创建一个 Web Worker，首先需要准备一个独立的 JavaScript 文件，这个文件将运行在后台线程中。</p><h3 id="主线程代码" tabindex="-1">主线程代码 <a class="header-anchor" href="#主线程代码" aria-label="Permalink to &quot;主线程代码&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 主页面代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> worker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Worker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;worker.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Worker 的参数支持网络路径 或者 new URL() 路径， 并不支持本地路径，所以要使用 本地路径时可以如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> worker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Worker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./generateFile.worker.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.url));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// console.log(new URL(&#39;./generateFile.worker.js&#39;, import.meta.url))  如下：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// hash:&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// host:&quot;localhost:5173&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// hostname:&quot;localhost&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// href:&quot;http://localhost:5173/src/uploadSharding/utils/generateFile.worker.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// origin:&quot;http://localhost:5173&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// password:&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// pathname:&quot;/src/uploadSharding/utils/generateFile.worker.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// port:&quot;5173&quot;</span></span></code></pre></div><ul><li><strong>import.meta.url：</strong> 是 ES 模块（ESM）中的一个内置对象，它返回当前模块的 URL，通常是当前文件在浏览器或 Node.js 环境中的位置 <ul><li>在浏览器环境中，它会返回当前模块的绝对 URL（比如 <code>h ttp://localhost:5173/src/uploadSharding/uploadSharding.vue?t=1736324013520</code> ）</li><li>在 Node.js 环境中，它会返回当前模块的文件路径（比如 file:///path/to/your/module.js）</li></ul></li><li><strong>new URL()：</strong> 是 JavaScript 中的一个内置函数，用于创建一个 URL 对象，该对象封装了 URL 的各个部分，包括协议、主机名、端口号、路径、查询字符串和哈希值等。 <ul><li>第一个参数是相对路径（&#39;./generateFile.worker.js&#39;），它是一个相对 URL。</li><li>第二个参数是当前模块的 URL（import.meta.url）,它指定了该相对 URL 解析时的基准 URL。</li></ul></li></ul><h3 id="web-worker-线程通讯" tabindex="-1">Web Worker 线程通讯 <a class="header-anchor" href="#web-worker-线程通讯" aria-label="Permalink to &quot;Web Worker 线程通讯&quot;">​</a></h3><p>在 Web Workers 中，self 代表当前 worker 的全局上下文。</p><ul><li><strong>访问 Worker 上下文：</strong> 通过 self 可以访问 Worker 的 <code>postMessage</code>、<code>onmessage</code>等方法。</li><li><strong>控制 Worker 生命周期：</strong> self 也可以用于结束 worker，例如调用 <code>self.close()</code> 来关闭当前 worker。</li></ul><p>在 worker.js 中，可以通过 <code>self.onmessage</code> 来监听主线程发送过来的消息，也可以用 <code>self.postMessage</code> 来向主线程发送消息。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// worker.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">self.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onmessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.data); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：Hello Worker!</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 处理接收到的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  self.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello Main!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>在主线程中，可以通过 <code>worker.postMessage</code> 来发送消息给 worker。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> worker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Worker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;worker.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">worker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello Worker!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>我们还可以使用 <code>worker.onmessage</code> 来监听 worker 发送的消息。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> worker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Worker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;worker.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">worker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onmessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="importscripts" tabindex="-1">importScripts() <a class="header-anchor" href="#importscripts" aria-label="Permalink to &quot;importScripts()&quot;">​</a></h3><p>在 Service Worker 中，importScripts() 也用于导入脚本文件，常用于服务工作线程中注册事件监听器、缓存文件等任务。importScripts() 也是同步的。</p><p>importScripts() 不支持 ES6 模块导入 (import/export)，它只能导入传统的 JavaScript 脚本。在 Worker 中使用 ES6 模块时，可以通过 Worker 的 type: &#39;module&#39; 选项来支持模块化。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// service-worker.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">importScripts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/cache-utils.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li><strong>同步加载：</strong> importScripts() 会阻塞当前 Worker 的执行，直到脚本文件加载完成。因此，它不适合用于需要并行执行任务的场景。</li><li><strong>同源策略：</strong> 如果导入的脚本文件是远程文件（例如通过 URL 引入），则必须遵循同源策略。也就是说，Worker 中的脚本只能从同一个源加载，除非服务器启用了 CORS（跨源资源共享）。</li><li><strong>无法使用动态导入：</strong> importScripts() 不支持像 import() 或 require() 这样的动态导入，它只能加载静态文件。</li></ul><h2 id="常用api" tabindex="-1">常用API <a class="header-anchor" href="#常用api" aria-label="Permalink to &quot;常用API&quot;">​</a></h2><ul><li><code>Worker()</code>：创建一个 Worker 对象，用于执行指定的脚本。</li><li><code>postMessage()</code>：向 另一个线程 发送消息。</li><li><code>onmessage</code>：当另一个线程发送消息时触发。</li><li><code>onerror</code>：当另一个线程发生错误时触发。</li><li><code>close()</code>：关闭当前线程。</li><li><code>terminate()</code>：终止当前线程。</li><li><code>importScripts()</code>:在 Worker 线程中加载外部 JavaScript 文件。</li></ul><h2 id="web-worker-的限制" tabindex="-1">web Worker 的限制 <a class="header-anchor" href="#web-worker-的限制" aria-label="Permalink to &quot;web Worker 的限制&quot;">​</a></h2><ul><li>不能直接操作 DOM</li><li>不能访问 window、document 对象</li><li>不能使用 setTimeout() 和 setInterval()，需要使用 Worker 的专用定时器 API</li></ul><h2 id="示例代码" tabindex="-1">示例代码 <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;示例代码&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 主页面代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> worker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Worker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;calculator.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">worker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({operation: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sum&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, numbers: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">worker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onmessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Sum result:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event.data.result); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：15</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// calculator.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">self.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onmessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.data;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (operation) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;sum&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">acc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> acc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 其他操作</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  self.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({result});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="其他-worker" tabindex="-1">其他 Worker <a class="header-anchor" href="#其他-worker" aria-label="Permalink to &quot;其他 Worker&quot;">​</a></h2><p>除了常见的 Web Worker，在浏览器环境中还有其他类型的 Worker，它们分别适用于不同的用途和场景。</p><h3 id="service-worker" tabindex="-1">Service Worker <a class="header-anchor" href="#service-worker" aria-label="Permalink to &quot;Service Worker&quot;">​</a></h3><p><code>Service Worker</code> 是一个独立于浏览器页面运行的 JavaScript 线程，可以在后台处理任务，例如缓存管理、离线支持、推送通知等。它的最大特点是能够在用户不打开页面的情况下运行。</p><ul><li>拦截和缓存网络请求：Service Worker 可以拦截从浏览器发出的请求，决定是否从缓存中加载资源，或者将请求转发到网络上。</li><li>离线工作：Service Worker 可以让你的应用在没有网络连接的情况下仍然工作，依靠缓存和后台同步。</li><li>推送通知：可以接收来自服务器的推送通知，并展示给用户。</li></ul><h3 id="shared-worker" tabindex="-1">Shared Worker <a class="header-anchor" href="#shared-worker" aria-label="Permalink to &quot;Shared Worker&quot;">​</a></h3><p><code>Shared Worker</code> 允许多个浏览器标签页、窗口或 iframe 共享同一个 Worker。它与 Web Worker 相似，但可以在多个上下文之间共享。</p><ul><li>跨多个浏览器上下文共享：可以在多个标签页、窗口或 iframe 之间共享同一个 Worker 实例。</li><li>消息传递：通过 port 对象在不同的窗口或标签页之间传递消息。</li></ul><h3 id="audio-worklet" tabindex="-1">Audio Worklet <a class="header-anchor" href="#audio-worklet" aria-label="Permalink to &quot;Audio Worklet&quot;">​</a></h3><p><code>Audio Worklet</code> 是用于创建高效音频处理节点的 API，适用于音频应用程序（如浏览器音频处理、音频合成等）。它在 Web Audio API 中提供了一个低延迟、高性能的音频处理机制。</p><ul><li>高性能：适合音频实时处理，减少延迟。</li><li>音频节点：可以创建自定义的音频节点进行音频数据的处理。</li></ul><h3 id="websocket-workers" tabindex="-1">WebSocket Workers <a class="header-anchor" href="#websocket-workers" aria-label="Permalink to &quot;WebSocket Workers&quot;">​</a></h3><p><code>WebSocket</code> 是一种双向通信协议，允许客户端和服务器之间通过一个持久化连接进行实时通讯。尽管 WebSocket 不是一个独立的 Worker 类型，它与 Workers 一起使用时，可以提供非常高效的实时通信。</p><ul><li>实时双向通信：与服务器保持一个持久的连接，适用于聊天、实时游戏等应用。</li><li>与 Web Worker 结合：可以将 WebSocket 与 Worker 结合，避免主线程阻塞。</li></ul>`,45),t=[l];function k(h,p,r,o,d,E){return a(),i("div",null,t)}const y=s(n,[["render",k]]);export{g as __pageData,y as default};
